#!/bin/bash

# Setup Codex CLI with complete .halo system integration
# Creates 1:1 mapping of all .halo resources to Codex

set -e

HALO_DIR="$HOME/.halo"
CODEX_DIR="$HOME/.codex"
CODEX_CONFIG="$CODEX_DIR/config.toml"

echo "🚀 Setting up Codex CLI with complete .halo system integration"

# Ensure .codex directory exists
mkdir -p "$CODEX_DIR"

# Create backup if config exists
if [ -f "$CODEX_CONFIG" ]; then
    cp "$CODEX_CONFIG" "$CODEX_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
    echo "  ✓ Backed up existing config"
fi

# Create comprehensive symlinks for ALL .halo resources
echo "📁 Creating 1:1 symlink mappings..."

# Core files
ln -sf "$HALO_DIR/CLAUDE.md" "$CODEX_DIR/AGENTS.md"
echo "  ✓ CLAUDE.md → AGENTS.md"

# All directories - direct mapping
for dir in commands components roles rules docs hooks templates; do
    if [ -d "$HALO_DIR/$dir" ]; then
        ln -sf "$HALO_DIR/$dir" "$CODEX_DIR/$dir"
        echo "  ✓ Linked $dir/"
    fi
done

# Generate Codex config.toml with complete .halo integration
echo "⚙️  Generating comprehensive Codex config..."

cat > "$CODEX_CONFIG" << 'EOF'
# Codex Configuration - Complete .halo System Integration
# Generated by .halo/scripts/setup-codex.sh

# ============================================
# CORE SETTINGS
# ============================================

# Use GPT-5 as default model (Codex exclusive)
model = "gpt-5"
model_provider = "openai"

# Default approval and sandbox settings
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Enable workspace network access for development
[sandbox_workspace_write]
network_access = true

# ============================================
# MCP SERVERS (Essential from Claude setup)
# ============================================

[mcp_servers.context7]
command = "npx"
args = ["-y", "@upstash/context7-mcp@latest"]

[mcp_servers.firecrawl]
command = "npx"
args = ["-y", "firecrawl-mcp"]
env = { FIRECRAWL_API_KEY = "fc-3f5d1be20d804ecf84b73153bf5f65fd" }

[mcp_servers.mastra]
command = "npx"
args = ["-y", "@mastra/mcp-docs-server"]

[mcp_servers.linear]
command = "npx"
args = ["-y", "@modelcontextprotocol/server-linear"]

[mcp_servers.github]
command = "npx"
args = ["-y", "@modelcontextprotocol/server-github"]

# ============================================
# HALO COMMAND PROFILES (1:1 Mapping)
# ============================================

# Core Commands
[profiles.prime]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

[profiles.build]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.create]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.diagram]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.ecosystem]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.fix]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.tech]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

# Planning Commands
[profiles.vision]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

[profiles.design]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.brand]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Maintenance Commands
[profiles.audit]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

[profiles.docs]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.sync]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Builder Commands
[profiles.build-anything]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.polish-interface]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.3d-artist]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.motion-expert]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Analyzer Commands
[profiles.audit-codebase]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

[profiles.pattern-extractor]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

# Integration Commands
[profiles.linear-whisperer]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.github-whisperer]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.cloudflare-whisperer]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Specialist Commands
[profiles.tech-docs]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.test-coverage]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.dependency-doctor]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Refiner Commands
[profiles.simplify-design]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.docs-generator]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# ============================================
# ROLE-BASED PROFILES
# ============================================

# Function Roles
[profiles.function_project-manager]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.function_marketing-strategist]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Persona Roles
[profiles.persona_visionary-founder]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

[profiles.persona_curious-intern]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "read-only"

# ============================================
# WORKFLOW PROFILES
# ============================================

[profiles.halo_full_auto]
# Full autonomy for trusted operations
model = "gpt-5"
approval_policy = "never"
sandbox_mode = "workspace-write"

[profiles.halo_safe]
# Safe exploration mode
model = "gpt-5"
approval_policy = "always"
sandbox_mode = "read-only"

[profiles.halo_dev]
# Standard development mode
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# ============================================
# PLATFORM-SPECIFIC PROFILES
# ============================================

[profiles.turborepo]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.mastra]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

[profiles.apple]
model = "gpt-5"
approval_policy = "on-request"
sandbox_mode = "workspace-write"
EOF

# Add environment variables notice
cat >> "$CODEX_CONFIG" << 'EOF'

# ============================================
# ENVIRONMENT VARIABLES NEEDED
# ============================================
# Export these in your shell profile:
# export OPENAI_API_KEY="your-key"
# export GITHUB_PERSONAL_ACCESS_TOKEN="your-token"
# export LINEAR_API_KEY="your-key"
EOF

echo "✅ Codex setup complete with full .halo integration!"
echo ""
echo "📋 Resource Mappings:"
echo "  ~/.codex/AGENTS.md → ~/.halo/CLAUDE.md"
echo "  ~/.codex/commands → ~/.halo/commands/"
echo "  ~/.codex/components → ~/.halo/components/"
echo "  ~/.codex/roles → ~/.halo/roles/"
echo "  ~/.codex/rules → ~/.halo/rules/"
echo "  ~/.codex/docs → ~/.halo/docs/"
echo "  ~/.codex/hooks → ~/.halo/hooks/"
echo "  ~/.codex/templates → ~/.halo/templates/"
echo ""
echo "🎯 Usage Examples:"
echo "  codex --profile prime          # Initialize session"
echo "  codex --profile build          # Build features"
echo "  codex --profile linear-whisperer # Linear integration"
echo "  codex --profile halo_dev       # Standard dev mode"
echo "  codex --profile halo_full_auto # Full auto mode"
echo ""
echo "💡 All .halo commands, roles, and rules are now accessible in Codex!"